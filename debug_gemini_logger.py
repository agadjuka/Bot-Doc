"""
–í–†–ï–ú–ï–ù–ù–ê–Ø –î–ï–ë–ê–ì-–§–£–ù–ö–¶–ò–Ø –î–õ–Ø –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø –ó–ê–ü–†–û–°–û–í –ö GEMINI
–≠–¢–û–¢ –§–ê–ô–õ –ú–û–ñ–ù–û –ë–ï–ó–û–ü–ê–°–ù–û –£–î–ê–õ–ò–¢–¨ –ü–û–°–õ–ï –û–¢–õ–ê–î–ö–ò
"""
import os
import json
import datetime
from typing import Optional
import shutil


class GeminiDebugLogger:
    """
    –í—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Gemini API.
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç –ø–∞–ø–∫—É –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.
    """
    
    def __init__(self, debug_folder: str = "debug_gemini_logs"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–±–∞–≥-–ª–æ–≥–≥–µ—Ä–∞
        
        Args:
            debug_folder: –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤ (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞)
        """
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞
        project_root = os.path.dirname(os.path.abspath(__file__))
        self.debug_folder = os.path.join(project_root, debug_folder)
        
        # –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self._cleanup_debug_folder()
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –∑–∞–Ω–æ–≤–æ
        os.makedirs(self.debug_folder, exist_ok=True)
        
        print(f"üîç Gemini Debug Logger –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {self.debug_folder}")
    
    def _cleanup_debug_folder(self):
        """–û—á–∏—â–∞–µ—Ç –ø–∞–ø–∫—É —Å –¥–µ–±–∞–≥-–ª–æ–≥–∞–º–∏"""
        if os.path.exists(self.debug_folder):
            try:
                shutil.rmtree(self.debug_folder)
                print(f"üßπ –û—á–∏—â–µ–Ω–∞ –ø–∞–ø–∫–∞ –¥–µ–±–∞–≥-–ª–æ–≥–æ–≤: {self.debug_folder}")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–ø–∫—É –¥–µ–±–∞–≥-–ª–æ–≥–æ–≤: {e}")
    
    def log_gemini_request(self, 
                          prompt: str, 
                          service_name: str = "unknown",
                          user_id: Optional[str] = None,
                          additional_info: Optional[dict] = None) -> str:
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Gemini API
        
        Args:
            prompt: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini
            service_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
            additional_info: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –ª–æ–≥–∞
        """
        try:
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs(self.debug_folder, exist_ok=True)
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S_%f")
            filename = f"gemini_request_{service_name}_{timestamp}.json"
            filepath = os.path.join(self.debug_folder, filename)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            log_data = {
                "timestamp": datetime.datetime.now().isoformat(),
                "service_name": service_name,
                "user_id": user_id,
                "prompt_length": len(prompt),
                "prompt_text": prompt,
                "additional_info": additional_info or {}
            }
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(log_data, f, ensure_ascii=False, indent=2)
            
            print(f"üìù Gemini –∑–∞–ø—Ä–æ—Å –∑–∞–ø–∏—Å–∞–Ω: {filename} ({len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
            return filepath
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –¥–µ–±–∞–≥-–ª–æ–≥–∞: {e}")
            return ""
    
    def log_gemini_response(self, 
                           response: str, 
                           request_filepath: str,
                           success: bool = True,
                           error_message: Optional[str] = None) -> str:
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç Gemini API
        
        Args:
            response: –û—Ç–≤–µ—Ç –æ—Ç Gemini
            request_filepath: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∑–∞–ø—Ä–æ—Å–æ–º
            success: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
            error_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            
        Returns:
            –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É —Å –æ—Ç–≤–µ—Ç–æ–º
        """
        try:
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs(self.debug_folder, exist_ok=True)
            
            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–π–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
            base_name = os.path.splitext(os.path.basename(request_filepath))[0]
            response_filename = f"{base_name}_response.json"
            response_filepath = os.path.join(self.debug_folder, response_filename)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
            response_data = {
                "timestamp": datetime.datetime.now().isoformat(),
                "success": success,
                "response_length": len(response) if response else 0,
                "response_text": response,
                "error_message": error_message,
                "original_request_file": os.path.basename(request_filepath)
            }
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
            with open(response_filepath, 'w', encoding='utf-8') as f:
                json.dump(response_data, f, ensure_ascii=False, indent=2)
            
            print(f"üìù Gemini –æ—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω: {response_filename} ({len(response) if response else 0} —Å–∏–º–≤–æ–ª–æ–≤)")
            return response_filepath
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –¥–µ–±–∞–≥-–ª–æ–≥–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
            return ""
    
    def get_debug_folder_path(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –¥–µ–±–∞–≥-–ª–æ–≥–∞–º–∏"""
        return self.debug_folder
    
    def cleanup(self):
        """–†—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–ø–∫–∏ —Å –¥–µ–±–∞–≥-–ª–æ–≥–∞–º–∏"""
        self._cleanup_debug_folder()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–æ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö
debug_logger = GeminiDebugLogger()


def log_gemini_request(prompt: str, service_name: str = "unknown", **kwargs) -> str:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini
    
    Args:
        prompt: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini
        service_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        
    Returns:
        –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –ª–æ–≥–∞
    """
    return debug_logger.log_gemini_request(prompt, service_name, **kwargs)


def log_gemini_response(response: str, request_filepath: str, **kwargs) -> str:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini
    
    Args:
        response: –û—Ç–≤–µ—Ç –æ—Ç Gemini
        request_filepath: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∑–∞–ø—Ä–æ—Å–æ–º
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        
    Returns:
        –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É —Å –æ—Ç–≤–µ—Ç–æ–º
    """
    return debug_logger.log_gemini_response(response, request_filepath, **kwargs)


def cleanup_debug_logs():
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–µ–±–∞–≥-–ª–æ–≥–æ–≤"""
    debug_logger.cleanup()
    print("üßπ –î–µ–±–∞–≥-–ª–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã")


# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
print("""
üîç GEMINI DEBUG LOGGER –ó–ê–ì–†–£–ñ–ï–ù
===============================
–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É 'debug_gemini_logs' –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
–∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ç—É–¥–∞ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –∫ Gemini API.

–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–µ–±–∞–≥–∞:
1. –£–¥–∞–ª–∏—Ç–µ —Ñ–∞–π–ª debug_gemini_logger.py
2. –£–¥–∞–ª–∏—Ç–µ –ø–∞–ø–∫—É debug_gemini_logs/
3. –£–±–µ—Ä–∏—Ç–µ –∏–º–ø–æ—Ä—Ç—ã –∏–∑ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤

–ü–∞–ø–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.
===============================
""")
