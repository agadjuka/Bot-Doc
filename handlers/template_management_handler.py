"""
Template Management Handler for Telegram Bot
Handles template upload, analysis, and management workflow
"""
import logging
import asyncio
import warnings
from typing import Dict, Any, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from telegram.error import BadRequest

# –ü–æ–¥–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è PTBUserWarning –¥–ª—è –±–æ–ª–µ–µ —á–∏—Å—Ç–æ–≥–æ –≤—ã–≤–æ–¥–∞
warnings.filterwarnings("ignore", category=UserWarning, module="telegram")

from config.settings import BotConfig
from services.template_processor_service import TemplateProcessorService
from services.storage_service import StorageService
from services.firestore_service import FirestoreService

logger = logging.getLogger(__name__)


class TemplateManagementHandler:
    """Handler for template management operations"""
    
    def __init__(self, config: BotConfig, firestore_service: Optional[FirestoreService] = None):
        """
        Initialize TemplateManagementHandler
        
        Args:
            config: Bot configuration
            firestore_service: Firestore service instance
        """
        self.config = config
        self.firestore_service = firestore_service
        self.template_processor = TemplateProcessorService()
        self.storage_service = StorageService(
            bucket_name=config.STORAGE_BUCKET_NAME,
            project_id=config.PROJECT_ID
        )
    
    async def templates_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """
        Handle /templates command - show template management menu
        
        Args:
            update: Telegram update
            context: Bot context
            
        Returns:
            Conversation state
        """
        try:
            keyboard = [
                [InlineKeyboardButton("‚ûï –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω", callback_data="upload_template")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "üìã **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏**\n\n"
                "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —à–∞–±–ª–æ–Ω–∞–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
            return ConversationHandler.END
            
        except Exception as e:
            logger.error(f"Error in templates_command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é —à–∞–±–ª–æ–Ω–æ–≤.")
            return ConversationHandler.END
    
    async def start_template_upload(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """
        Start template upload process
        
        Args:
            update: Telegram update
            context: Bot context
            
        Returns:
            Conversation state
        """
        try:
            query = update.callback_query
            await query.answer()
            
            await query.edit_message_text(
                "üìÑ **–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞**\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∞—à —à–∞–±–ª–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ .docx –∏–ª–∏ .doc",
                parse_mode='Markdown'
            )
            
            return self.config.AWAITING_TEMPLATE_UPLOAD
            
        except Exception as e:
            logger.error(f"Error in start_template_upload: {e}")
            await update.callback_query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞.")
            return ConversationHandler.END
    
    async def handle_template_upload(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """
        Handle template file upload and analysis with new two-file strategy
        
        Args:
            update: Telegram update
            context: Bot context
            
        Returns:
            Conversation state
        """
        try:
            document = update.message.document
            user_id = update.effective_user.id
            
            print(f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {document.file_name} ({document.file_size} –±–∞–π—Ç)")
            
            # Check file extension
            file_name_lower = document.file_name.lower()
            if not (file_name_lower.endswith('.docx') or file_name_lower.endswith('.doc')):
                print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {document.file_name}")
                await update.message.reply_text(
                    "‚ùå **–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞**\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .docx –∏–ª–∏ .doc",
                    parse_mode='Markdown'
                )
                return self.config.AWAITING_TEMPLATE_UPLOAD
            
            # Determine file format
            file_format = '.docx' if file_name_lower.endswith('.docx') else '.doc'
            context.user_data['original_file_format'] = file_format
            
            # Send analysis message
            analysis_msg = await update.message.reply_text(
                "‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —à–∞–±–ª–æ–Ω...",
                parse_mode='Markdown'
            )
            
            # Download file
            file = await context.bot.get_file(document.file_id)
            file_bytes = await file.download_as_bytearray()
            file_bytes = bytes(file_bytes)
            print(f"üì• –§–∞–π–ª —Å–∫–∞—á–∞–Ω: {len(file_bytes)} –±–∞–π—Ç")
            
            # Analyze document using new two-file method
            preview_bytes, smart_template_bytes = await self.template_processor.analyze_and_prepare_templates(file_bytes, file_format)
            
            if not preview_bytes or not smart_template_bytes:
                print(f"‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è")
                await analysis_msg.edit_text(
                    "‚ùå **–ê–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è**\n\n"
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç. "
                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –µ—Å—Ç—å –º–µ—Å—Ç–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö.",
                    parse_mode='Markdown'
                )
                return self.config.AWAITING_TEMPLATE_UPLOAD
            
            print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: preview {len(preview_bytes)} –±–∞–π—Ç, template {len(smart_template_bytes)} –±–∞–π—Ç")
            
            # Store both files in FSM storage
            context.user_data['preview_bytes'] = preview_bytes
            context.user_data['smart_template_bytes'] = smart_template_bytes
            context.user_data['original_file_name'] = document.file_name
            
            # Send the preview file as a document immediately
            from io import BytesIO
            preview_file = BytesIO(preview_bytes)
            preview_file.name = f"preview_{document.file_name}"
            
            await analysis_msg.edit_text(
                "‚úÖ –ì–æ—Ç–æ–≤–æ! –Ø –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏–ª –ø–æ–ª—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è (–æ–Ω–∏ –≤—ã–¥–µ–ª–µ–Ω—ã –∫—Ä–∞—Å–Ω—ã–º).\n\n"
                "–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏–º—è –¥–ª—è —ç—Ç–æ–≥–æ —à–∞–±–ª–æ–Ω–∞, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ. –î–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª."
            )
            
            await update.message.reply_document(
                document=preview_file,
                caption="üìÑ –§–∞–π–ª –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥–æ—Ç–æ–≤"
            )
            
            print(f"üì§ –§–∞–π–ª –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
            
            return self.config.AWAITING_TEMPLATE_NAME
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —à–∞–±–ª–æ–Ω–∞: {e}")
            logger.error(f"Error in handle_template_upload: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.")
            return ConversationHandler.END
    
    async def handle_template_name_and_save(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """
        Handle template name input and save smart template
        
        Args:
            update: Telegram update
            context: Bot context
            
        Returns:
            Conversation state
        """
        try:
            template_name = update.message.text.strip()
            user_id = update.effective_user.id
            
            print(f"üíæ –ò–º—è —à–∞–±–ª–æ–Ω–∞: '{template_name}'")
            
            if not template_name:
                print(f"‚ùå –ü—É—Å—Ç–æ–µ –∏–º—è —à–∞–±–ª–æ–Ω–∞")
                await update.message.reply_text(
                    "‚ùå **–ò–º—è —à–∞–±–ª–æ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º**\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –¥–ª—è —à–∞–±–ª–æ–Ω–∞.",
                    parse_mode='Markdown'
                )
                return self.config.AWAITING_TEMPLATE_NAME
            
            # Get stored smart template data
            smart_template_bytes = context.user_data.get('smart_template_bytes')
            
            if not smart_template_bytes:
                print(f"‚ùå –î–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–∞ –ø–æ—Ç–µ—Ä—è–Ω—ã")
                await update.message.reply_text(
                    "‚ùå **–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö**\n\n"
                    "–î–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–∞ –±—ã–ª–∏ –ø–æ—Ç–µ—Ä—è–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É –∑–∞–Ω–æ–≤–æ.",
                    parse_mode='Markdown'
                )
                return ConversationHandler.END
            
            # Create destination path with original file format
            original_format = context.user_data.get('original_file_format', '.docx')
            destination_path = f"user_{user_id}/{template_name}{original_format}"
            
            print(f"‚òÅÔ∏è –ó–∞–≥—Ä—É–∂–∞—é –≤ Cloud Storage...")
            # Upload smart template to storage
            upload_success = await self.storage_service.upload_file(
                smart_template_bytes,
                destination_path
            )
            
            if not upload_success:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Cloud Storage")
                await update.message.reply_text(
                    "‚ùå **–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è**\n\n"
                    "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω –≤ –æ–±–ª–∞—á–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.",
                    parse_mode='Markdown'
                )
                return ConversationHandler.END
            
            print(f"‚úÖ –®–∞–±–ª–æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Cloud Storage")
            
            # Save to Firestore
            if self.firestore_service:
                firestore_success = await self.firestore_service.add_template(
                    user_id=user_id,
                    template_name=template_name,
                    file_path=destination_path,
                    file_type='docx'
                )
                
                if not firestore_success:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Firestore")
                    logger.warning(f"Failed to save template metadata to Firestore for user {user_id}")
                else:
                    print(f"‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Firestore")
            
            # Clean up user data
            context.user_data.pop('preview_bytes', None)
            context.user_data.pop('smart_template_bytes', None)
            context.user_data.pop('original_file_name', None)
            
            print(f"üéâ –®–∞–±–ª–æ–Ω '{template_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            await update.message.reply_text(
                f"‚úÖ **–®–∞–±–ª–æ–Ω '{template_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!**\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —à–∞–±–ª–æ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.",
                parse_mode='Markdown'
            )
            
            return ConversationHandler.END
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞: {e}")
            logger.error(f"Error in handle_template_name_and_save: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞.")
            return ConversationHandler.END
    
    async def cancel_template_upload(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """
        Cancel template upload process
        
        Args:
            update: Telegram update
            context: Bot context
            
        Returns:
            Conversation state
        """
        try:
            # Clean up user data
            context.user_data.pop('preview_bytes', None)
            context.user_data.pop('smart_template_bytes', None)
            context.user_data.pop('original_file_name', None)
            
            await update.message.reply_text(
                "‚ùå **–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞**\n\n"
                "–®–∞–±–ª–æ–Ω –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω.",
                parse_mode='Markdown'
            )
            
            return ConversationHandler.END
            
        except Exception as e:
            logger.error(f"Error in cancel_template_upload: {e}")
            return ConversationHandler.END
