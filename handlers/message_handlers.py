"""
Message handlers for Telegram bot - Template version
"""
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from config.settings import BotConfig
from services.ai_service import ReceiptAnalysisServiceCompat
from handlers.base_message_handler import BaseMessageHandler
from config.locales.locale_manager import get_global_locale_manager


class MessageHandlers(BaseMessageHandler):
    """Main message handlers coordinator - template version"""
    
    def __init__(self, config: BotConfig, analysis_service: ReceiptAnalysisServiceCompat):
        super().__init__(config, analysis_service)
        
        # Initialize LocaleManager
        self.locale_manager = get_global_locale_manager()
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handle /start command"""
        print(f"DEBUG: Start command received from user {update.effective_user.id}")
        
        # Get user language
        user_id = update.effective_user.id
        language = self.locale_manager.get_user_language(user_id)
        
        # Welcome message
        welcome_text = self._get_welcome_message(language)
        
        # Create keyboard
        keyboard = self._get_main_keyboard(language)
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
        return self.config.AWAITING_INPUT
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handle /help command"""
        user_id = update.effective_user.id
        language = self.locale_manager.get_user_language(user_id)
        
        help_text = self._get_help_message(language)
        
        await update.message.reply_text(
            help_text,
            parse_mode='HTML'
        )
        
        return self.config.AWAITING_INPUT
    
    async def dashboard_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handle /dashboard command - redirect to dashboard handler"""
        from handlers.dashboard_handler import DashboardHandler
        
        # Create dashboard handler instance
        dashboard_handler = DashboardHandler(self.config)
        
        # Call the dashboard_command method
        return await dashboard_handler.dashboard_command(update, context)
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handle text messages"""
        user_id = update.effective_user.id
        language = self.locale_manager.get_user_language(user_id)
        
        # Simple echo with AI response
        user_text = update.message.text
        
        # Get AI response
        try:
            ai_response = await self._get_ai_response(user_text, language)
            await update.message.reply_text(ai_response, parse_mode='HTML')
        except Exception as e:
            print(f"Error getting AI response: {e}")
            await update.message.reply_text(
                self._get_error_message(language),
                parse_mode='HTML'
            )
        
        return self.config.AWAITING_INPUT
    
    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handle document uploads - redirect to dashboard handler for template processing"""
        from handlers.dashboard_handler import DashboardHandler
        
        # Create dashboard handler instance
        dashboard_handler = DashboardHandler(self.config)
        
        # Check if user is in template addition state
        if context.user_data.get('state') == dashboard_handler.AWAITING_TEMPLATE_FILE:
            return await dashboard_handler.handle_template_file(update, context)
        else:
            # If not in template state, show message about using dashboard
            user_id = update.effective_user.id
            language = self.locale_manager.get_user_language(user_id)
            
            message_text = {
                'en': "üìÑ <b>Document Upload</b>\n\nTo add a template, please use the Personal Cabinet:\n1. Click 'Personal Cabinet' button\n2. Click 'Add New Template'\n3. Upload your .docx or .doc file",
                'ru': "üìÑ <b>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞</b>\n\n–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:\n1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'\n2. –ù–∞–∂–º–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω'\n3. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à .docx –∏–ª–∏ .doc —Ñ–∞–π–ª"
            }
            
            await update.message.reply_text(
                message_text.get(language, message_text['en']),
                parse_mode='HTML'
            )
            
            return self.config.AWAITING_INPUT
    
    def _get_welcome_message(self, language: str) -> str:
        """Get welcome message based on language"""
        messages = {
            'en': """
ü§ñ <b>Welcome to AI Bot Template!</b>

This is a basic template for creating Telegram bots with AI capabilities.

<b>Available commands:</b>
/start - Start the bot
/help - Show help information

Just send me a message and I'll respond using AI!
            """,
            'ru': """
ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Bot Template!</b>

–≠—Ç–æ –±–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Telegram –±–æ—Ç–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –ò–ò.

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É —Å –ø–æ–º–æ—â—å—é –ò–ò!
            """
        }
        return messages.get(language, messages['en'])
    
    def _get_help_message(self, language: str) -> str:
        """Get help message based on language"""
        messages = {
            'en': """
<b>Help - AI Bot Template</b>

This bot can:
‚Ä¢ Respond to text messages using AI
‚Ä¢ Support multiple languages
‚Ä¢ Provide basic conversation capabilities

<b>Commands:</b>
/start - Start the bot
/help - Show this help

<b>Usage:</b>
Just send any text message and the bot will respond using AI!
            """,
            'ru': """
<b>–°–ø—Ä–∞–≤–∫–∞ - AI Bot Template</b>

–≠—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç:
‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –ò–ò
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —è–∑—ã–∫–æ–≤
‚Ä¢ –û–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –±–∞–∑–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–±—â–µ–Ω–∏—è

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –±–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç —Å –ø–æ–º–æ—â—å—é –ò–ò!
            """
        }
        return messages.get(language, messages['en'])
    
    def _get_main_keyboard(self, language: str) -> InlineKeyboardMarkup:
        """Get main keyboard based on language"""
        buttons = {
            'en': [
                [InlineKeyboardButton("üè† Personal Cabinet", callback_data="dashboard")],
                [InlineKeyboardButton("Help", callback_data="help")],
                [InlineKeyboardButton("Language", callback_data="language")]
            ],
            'ru': [
                [InlineKeyboardButton("üè† –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="dashboard")],
                [InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data="help")],
                [InlineKeyboardButton("–Ø–∑—ã–∫", callback_data="language")]
            ]
        }
        
        keyboard_buttons = buttons.get(language, buttons['en'])
        return InlineKeyboardMarkup(keyboard_buttons)
    
    def _get_error_message(self, language: str) -> str:
        """Get error message based on language"""
        messages = {
            'en': "Sorry, I encountered an error. Please try again later.",
            'ru': "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        }
        return messages.get(language, messages['en'])
    
    async def _get_ai_response(self, user_text: str, language: str) -> str:
        """Get AI response for user text"""
        try:
            # Use the analysis service to get AI response
            response = await self.analysis_service.get_ai_response(
                user_text,
                language=language
            )
            return response
        except Exception as e:
            print(f"Error in AI response: {e}")
            return self._get_error_message(language)
