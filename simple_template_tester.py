#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤
"""
import json
import os
from dotenv import load_dotenv
from docx import Document
from io import BytesIO

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv("env.local")

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Google Cloud
os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "bot-doc-473208-706e6adceee1.json"

def load_gemini_response():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç Gemini –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open("gemini_request_TemplateProcessorService_20250928_202156_318890_response.json", "r", encoding="utf-8") as f:
            response_data = json.load(f)
        
        gemini_response = response_data["response_text"]
        print(f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Gemini ({len(gemini_response)} —Å–∏–º–≤–æ–ª–æ–≤)")
        return gemini_response
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini: {e}")
        return None

def parse_gemini_response(gemini_response):
    """–ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç Gemini –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –ø–ª–∞–Ω –ø—Ä–∞–≤–æ–∫"""
    print("\nüîç –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –æ—Ç Gemini...")
    
    try:
        # Clean the response (remove markdown formatting if present)
        cleaned_response = gemini_response.strip()
        
        # Remove markdown code blocks
        if cleaned_response.startswith('```json'):
            cleaned_response = cleaned_response[7:]
        elif cleaned_response.startswith('```'):
            cleaned_response = cleaned_response[3:]
        
        if cleaned_response.endswith('```'):
            cleaned_response = cleaned_response[:-3]
        
        cleaned_response = cleaned_response.strip()
        
        # Try to find JSON array in the response
        json_start = cleaned_response.find('[')
        json_end = cleaned_response.rfind(']') + 1
        
        if json_start != -1 and json_end > json_start:
            json_text = cleaned_response[json_start:json_end]
            edits_plan = json.loads(json_text)
        else:
            edits_plan = json.loads(cleaned_response)
        
        print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(edits_plan)} –ø—Ä–∞–≤–æ–∫:")
        for i, edit in enumerate(edits_plan):
            print(f"  {i+1}. run_id={edit['run_id']}, field_name='{edit['field_name']}'")
        
        return edits_plan
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        return []

def load_test_document():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π Word-–¥–æ–∫—É–º–µ–Ω—Ç"""
    try:
        doc_path = "–î–û–ì–û–í–û–† –° –ê–í–¢–û–ö–ò–¢!.docx"
        if not os.path.exists(doc_path):
            print(f"‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {doc_path}")
            return None
        
        with open(doc_path, "rb") as f:
            file_bytes = f.read()
        
        print(f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç: {len(file_bytes)} –±–∞–π—Ç")
        return file_bytes
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        return None

def index_runs_and_build_map(doc_object):
    """–°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç—É run'–æ–≤ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    print("\nüìä –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É run'–æ–≤...")
    
    try:
        map_for_gemini = ""
        coords_dictionary = {}
        run_counter = 0
        
        # Process document body elements in order (paragraphs and tables)
        for element in doc_object._body._body:
            if element.tag.endswith('p'):  # Paragraph
                # Process paragraph
                paragraph = None
                for p in doc_object.paragraphs:
                    if p._element == element:
                        paragraph = p
                        break
                
                if paragraph:
                    for run in paragraph.runs:
                        # Generate unique ID for this run
                        run_id = f"run-{run_counter}"
                        
                        # Add run to coordinates dictionary
                        coords_dictionary[run_id] = run
                        
                        # Add run to map for Gemini
                        map_for_gemini += f"[{run_id}]{run.text}"
                        
                        # Increment counter
                        run_counter += 1
                    
                    # Add newline after each paragraph
                    map_for_gemini += "\n"
            
            elif element.tag.endswith('tbl'):  # Table
                # Process table
                table = None
                for t in doc_object.tables:
                    if t._element == element:
                        table = t
                        break
                
                if table:
                    # Build matrix of runs for this table
                    table_matrix = []
                    
                    for row in table.rows:
                        row_runs = []
                        for cell in row.cells:
                            cell_runs = []
                            for paragraph in cell.paragraphs:
                                for run in paragraph.runs:
                                    # Generate unique ID for this run
                                    run_id = f"run-{run_counter}"
                                    
                                    # Add run to coordinates dictionary
                                    coords_dictionary[run_id] = run
                                    
                                    # Add run to cell runs list
                                    cell_runs.append(f"[{run_id}]{run.text}")
                                    
                                    # Increment counter
                                    run_counter += 1
                            
                            # Join all runs in this cell with <br> for line breaks
                            cell_text = "<br>".join(cell_runs)
                            row_runs.append(cell_text)
                        
                        table_matrix.append(row_runs)
                    
                    # Generate Markdown table representation
                    if table_matrix:
                        # Add table header
                        if len(table_matrix) > 0:
                            header_row = "| " + " | ".join(table_matrix[0]) + " |"
                            map_for_gemini += header_row + "\n"
                            
                            # Add separator row
                            separator_row = "| " + " | ".join([":---"] * len(table_matrix[0])) + " |"
                            map_for_gemini += separator_row + "\n"
                            
                            # Add data rows
                            for row in table_matrix[1:]:
                                data_row = "| " + " | ".join(row) + " |"
                                map_for_gemini += data_row + "\n"
                        
                        # Add newline after table
                        map_for_gemini += "\n"
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(coords_dictionary)} run'–æ–≤ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ")
        print(f"üîç –ü–µ—Ä–≤—ã–µ 10 run_id: {list(coords_dictionary.keys())[:10]}")
        print(f"üîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 run_id: {list(coords_dictionary.keys())[-10:]}")
        
        return map_for_gemini, coords_dictionary
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã run'–æ–≤: {e}")
        return "", {}

def test_edits_application(doc, coords_dictionary, edits_plan):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–æ–∫ –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É"""
    print(f"\nüîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ {len(edits_plan)} –ø—Ä–∞–≤–æ–∫...")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    original_bytes = BytesIO()
    doc.save(original_bytes)
    original_bytes.seek(0)
    
    test_doc = Document(original_bytes)
    _, test_coords_dictionary = index_runs_and_build_map(test_doc)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∫–∏
    successful_edits = 0
    failed_edits = 0
    
    for i, edit in enumerate(edits_plan):
        run_id = edit['run_id']
        field_name = edit['field_name']
        
        print(f"\nüîç –ü—Ä–∞–≤–∫–∞ {i+1}/{len(edits_plan)}: run_id={run_id}, field_name='{field_name}'")
        
        # –ò—â–µ–º run –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ
        test_run = test_coords_dictionary.get(run_id)
        
        if not test_run:
            print(f"‚ùå Run {run_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ")
            print(f"üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ run_id: {list(test_coords_dictionary.keys())[:10]}...")
            failed_edits += 1
            continue
        
        print(f"‚úÖ Run {run_id} –Ω–∞–π–¥–µ–Ω")
        print(f"üìù –¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç: '{test_run.text}'")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∫—É
        if field_name == "":
            print(f"üßπ –û—á–∏—â–∞—é run {run_id}")
            test_run.text = ""
        else:
            print(f"‚úèÔ∏è –ó–∞–º–µ–Ω—è—é run {run_id} –Ω–∞ '[{field_name}]'")
            test_run.text = f"[{field_name}]"
        
        print(f"üìù –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç: '{test_run.text}'")
        successful_edits += 1
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–æ–∫:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ: {successful_edits}")
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å: {failed_edits}")
    
    return test_doc, successful_edits, failed_edits

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –ü–†–û–°–¢–û–ì–û –¢–ï–°–¢–ê –°–ò–°–¢–ï–ú–´ –û–ë–†–ê–ë–û–¢–ö–ò –®–ê–ë–õ–û–ù–û–í")
    print("=" * 60)
    
    # –®–∞–≥ 1: –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Gemini
    gemini_response = load_gemini_response()
    if not gemini_response:
        return
    
    # –®–∞–≥ 2: –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –æ—Ç Gemini
    edits_plan = parse_gemini_response(gemini_response)
    if not edits_plan:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø–ª–∞–Ω –ø—Ä–∞–≤–æ–∫")
        return
    
    # –®–∞–≥ 3: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
    file_bytes = load_test_document()
    if not file_bytes:
        return
    
    # –®–∞–≥ 4: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    doc = Document(BytesIO(file_bytes))
    
    # –®–∞–≥ 5: –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É run'–æ–≤
    map_for_gemini, coords_dictionary = index_runs_and_build_map(doc)
    
    # –®–∞–≥ 6: –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–æ–∫
    test_doc, successful_edits, failed_edits = test_edits_application(
        doc, coords_dictionary, edits_plan
    )
    
    # –®–∞–≥ 7: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    try:
        test_output_path = "test_output_with_edits.docx"
        test_doc.save(test_output_path)
        print(f"üíæ –¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {test_output_path}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    # –®–∞–≥ 8: –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 60)
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ –ø—Ä–∞–≤–æ–∫: {successful_edits}")
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å: {failed_edits}")
    print(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful_edits / len(edits_plan)) * 100:.1f}%")
    
    if failed_edits > 0:
        print("\nüîç –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ run_id –≤ –æ—Ç–≤–µ—Ç–µ Gemini –∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ")
        print("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã run'–æ–≤")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–∫—É –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ run'–æ–≤")
    else:
        print("\nüéâ –í–°–ï –ü–†–ê–í–ö–ò –ü–†–ò–ú–ï–ù–ï–ù–´ –£–°–ü–ï–®–ù–û!")

if __name__ == "__main__":
    main()
