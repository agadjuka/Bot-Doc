#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤
"""
import asyncio
import os
from services.template_processor_service import TemplateProcessorService

async def test_template_processing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —à–∞–±–ª–æ–Ω–∞ —Å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
    service = TemplateProcessorService()
    
    # –ü—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É —Ñ–∞–π–ª—É (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø—É—Ç—å)
    test_file_path = "templates/test_template.docx"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø—É—Ç—å
    
    if not os.path.exists(test_file_path):
        print(f"‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_file_path}")
        print("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π .docx —Ñ–∞–π–ª –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å")
        return
    
    try:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        with open(test_file_path, 'rb') as f:
            file_bytes = f.read()
        
        print(f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {len(file_bytes)} –±–∞–π—Ç")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —à–∞–±–ª–æ–Ω—ã
        print("\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
        preview_bytes, smart_template_bytes = await service.analyze_and_prepare_templates(file_bytes)
        
        if preview_bytes and smart_template_bytes:
            print(f"\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìä Preview: {len(preview_bytes)} –±–∞–π—Ç")
            print(f"üìä Smart template: {len(smart_template_bytes)} –±–∞–π—Ç")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            with open("debug_preview.docx", "wb") as f:
                f.write(preview_bytes)
            print("üíæ Preview —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ debug_preview.docx")
            
            with open("debug_smart_template.docx", "wb") as f:
                f.write(smart_template_bytes)
            print("üíæ Smart template —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ debug_smart_template.docx")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_template_processing())
