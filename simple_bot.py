#!/usr/bin/env python3
"""
Simple bot without AI service - just basic functionality
"""
import os
import json
import asyncio
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
)
from telegram.error import Conflict, NetworkError

def setup_environment():
    """Setup environment from JSON file"""
    current_dir = os.getcwd()
    json_file = os.path.join(current_dir, 'google-cloud-credentials.json')
    
    if not os.path.exists(json_file):
        print(f"‚ùå JSON file not found: {json_file}")
        return False
    
    # Set environment variables
    os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = json_file
    os.environ['PROJECT_ID'] = 'bot-doc-473208'
    os.environ['GOOGLE_CLOUD_LOCATION'] = 'asia-southeast1'
    os.environ['FIRESTORE_DATABASE'] = 'default'
    
    print("‚úÖ Environment configured from JSON")
    return True

async def start_command(update, context):
    """Handle /start command"""
    await update.message.reply_text(
        "ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Bot Doc!**\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/help - –°–ø—Ä–∞–≤–∫–∞\n"
        "/new_contract - –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞",
        parse_mode='HTML'
    )

async def help_command(update, context):
    """Handle /help command"""
    await update.message.reply_text(
        "üìã **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É**\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:\n"
        "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã\n"
        "‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏—è—Ö\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "/new_contract - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç",
        parse_mode='HTML'
    )

async def new_contract_command(update, context):
    """Handle /new_contract command"""
    await update.message.reply_text(
        "üìÑ **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞**\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏ "
        "(–∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è) –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏—Ö "
        "–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –¥–æ–∫—É–º–µ–Ω—Ç.",
        parse_mode='HTML'
    )

async def handle_text(update, context):
    """Handle text messages"""
    user_text = update.message.text
    
    # Simple response
    await update.message.reply_text(
        f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_text[:100]}...\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new_contract –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞.",
        parse_mode='HTML'
    )

def safe_start_bot(application: Application, max_retries: int = 3) -> None:
    """Safe bot startup with conflict handling"""
    for attempt in range(max_retries):
        try:
            print(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ #{attempt + 1}...")
            
            # Reset webhook
            try:
                import asyncio
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                loop.run_until_complete(application.bot.delete_webhook(drop_pending_updates=True))
                print("‚úÖ Webhook —Å–±—Ä–æ—à–µ–Ω")
            except Exception as e:
                print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ webhook: {e}")
            
            # Start bot
            application.run_polling()
            break
            
        except Conflict as e:
            print(f"‚ùå –ö–æ–Ω—Ñ–ª–∏–∫—Ç (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}")
            if attempt < max_retries - 1:
                import time
                wait_time = (attempt + 1) * 5
                print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥...")
                time.sleep(wait_time)
            else:
                print("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω–æ")
                raise
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            raise

def main():
    """Main function"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ –±–æ—Ç–∞...")
    
    # Setup environment
    if not setup_environment():
        return
    
    # Check BOT_TOKEN
    bot_token = os.getenv('BOT_TOKEN')
    if not bot_token:
        print("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: $env:BOT_TOKEN = '–≤–∞—à_—Ç–æ–∫–µ–Ω'")
        return
    
    print("‚úÖ BOT_TOKEN –Ω–∞–π–¥–µ–Ω")
    
    # Create application
    application = Application.builder().token(bot_token).concurrent_updates(True).build()
    
    # Add handlers
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("new_contract", new_contract_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    
    print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    
    try:
        safe_start_bot(application)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
