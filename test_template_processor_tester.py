#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–Ω–µ—Å–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ Word-–¥–æ–∫—É–º–µ–Ω—Ç
"""
import asyncio
import json
import os
from dotenv import load_dotenv
from docx import Document
from io import BytesIO

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv("env.local")

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Google Cloud
os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "bot-doc-473208-706e6adceee1.json"

from services.template_processor_service import TemplateProcessorService

class TemplateProcessorTester:
    """–¢–µ—Å—Ç–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤"""
    
    def __init__(self):
        self.service = TemplateProcessorService()
        self.test_document_path = "–î–û–ì–û–í–û–† –° –ê–í–¢–û–ö–ò–¢!.docx"
        self.gemini_response_path = "gemini_request_TemplateProcessorService_20250928_202156_318890_response.json"
    
    def load_gemini_response(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç Gemini –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(self.gemini_response_path, "r", encoding="utf-8") as f:
                response_data = json.load(f)
            
            gemini_response = response_data["response_text"]
            print(f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Gemini ({len(gemini_response)} —Å–∏–º–≤–æ–ª–æ–≤)")
            return gemini_response
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini: {e}")
            return None
    
    def load_test_document(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π Word-–¥–æ–∫—É–º–µ–Ω—Ç"""
        try:
            if not os.path.exists(self.test_document_path):
                print(f"‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.test_document_path}")
                return None
            
            with open(self.test_document_path, "rb") as f:
                file_bytes = f.read()
            
            print(f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç: {len(file_bytes)} –±–∞–π—Ç")
            return file_bytes
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            return None
    
    def parse_gemini_response(self, gemini_response):
        """–ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç Gemini –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –ø–ª–∞–Ω –ø—Ä–∞–≤–æ–∫"""
        print("\nüîç –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –æ—Ç Gemini...")
        edits_plan = self.service._parse_gemini_edits_plan(gemini_response)
        
        print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(edits_plan)} –ø—Ä–∞–≤–æ–∫:")
        for i, edit in enumerate(edits_plan):
            print(f"  {i+1}. run_id={edit['run_id']}, field_name='{edit['field_name']}'")
        
        return edits_plan
    
    def analyze_document_structure(self, file_bytes):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ —Å–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç—É run'–æ–≤"""
        print("\nüìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        doc = Document(BytesIO(file_bytes))
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É run'–æ–≤
        map_for_gemini, coords_dictionary = self.service._index_runs_and_build_map(doc)
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(coords_dictionary)} run'–æ–≤ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ")
        print(f"üîç –ü–µ—Ä–≤—ã–µ 10 run_id: {list(coords_dictionary.keys())[:10]}")
        print(f"üîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 run_id: {list(coords_dictionary.keys())[-10:]}")
        
        return doc, coords_dictionary
    
    def test_edits_application(self, doc, coords_dictionary, edits_plan):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–æ–∫ –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É"""
        print(f"\nüîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ {len(edits_plan)} –ø—Ä–∞–≤–æ–∫...")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        original_bytes = BytesIO()
        doc.save(original_bytes)
        original_bytes.seek(0)
        
        test_doc = Document(original_bytes)
        _, test_coords_dictionary = self.service._index_runs_and_build_map(test_doc)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∫–∏
        successful_edits = 0
        failed_edits = 0
        
        for i, edit in enumerate(edits_plan):
            run_id = edit['run_id']
            field_name = edit['field_name']
            
            print(f"\nüîç –ü—Ä–∞–≤–∫–∞ {i+1}/{len(edits_plan)}: run_id={run_id}, field_name='{field_name}'")
            
            # –ò—â–µ–º run –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ
            test_run = test_coords_dictionary.get(run_id)
            
            if not test_run:
                print(f"‚ùå Run {run_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ")
                print(f"üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ run_id: {list(test_coords_dictionary.keys())[:10]}...")
                failed_edits += 1
                continue
            
            print(f"‚úÖ Run {run_id} –Ω–∞–π–¥–µ–Ω")
            print(f"üìù –¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç: '{test_run.text}'")
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∫—É
            if field_name == "":
                print(f"üßπ –û—á–∏—â–∞—é run {run_id}")
                test_run.text = ""
            else:
                print(f"‚úèÔ∏è –ó–∞–º–µ–Ω—è—é run {run_id} –Ω–∞ '[{field_name}]'")
                test_run.text = f"[{field_name}]"
            
            print(f"üìù –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç: '{test_run.text}'")
            successful_edits += 1
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–æ–∫:")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ: {successful_edits}")
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å: {failed_edits}")
        
        return test_doc, successful_edits, failed_edits
    
    def save_test_results(self, test_doc, successful_edits, failed_edits):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
            test_output_path = "test_output_with_edits.docx"
            test_doc.save(test_output_path)
            print(f"üíæ –¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {test_output_path}")
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
            report_path = "test_report.txt"
            with open(report_path, "w", encoding="utf-8") as f:
                f.write("–û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –°–ò–°–¢–ï–ú–´ –û–ë–†–ê–ë–û–¢–ö–ò –®–ê–ë–õ–û–ù–û–í\n")
                f.write("=" * 50 + "\n\n")
                f.write(f"–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç: {self.test_document_path}\n")
                f.write(f"–û—Ç–≤–µ—Ç –æ—Ç Gemini: {self.gemini_response_path}\n\n")
                f.write(f"–£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ –ø—Ä–∞–≤–æ–∫: {successful_edits}\n")
                f.write(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å: {failed_edits}\n")
                f.write(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {test_output_path}\n")
            
            print(f"üìã –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
    
    async def run_full_test(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤"""
        print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ê –°–ò–°–¢–ï–ú–´ –û–ë–†–ê–ë–û–¢–ö–ò –®–ê–ë–õ–û–ù–û–í")
        print("=" * 60)
        
        # –®–∞–≥ 1: –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Gemini
        gemini_response = self.load_gemini_response()
        if not gemini_response:
            return
        
        # –®–∞–≥ 2: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        file_bytes = self.load_test_document()
        if not file_bytes:
            return
        
        # –®–∞–≥ 3: –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –æ—Ç Gemini
        edits_plan = self.parse_gemini_response(gemini_response)
        if not edits_plan:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø–ª–∞–Ω –ø—Ä–∞–≤–æ–∫")
            return
        
        # –®–∞–≥ 4: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
        doc, coords_dictionary = self.analyze_document_structure(file_bytes)
        
        # –®–∞–≥ 5: –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–æ–∫
        test_doc, successful_edits, failed_edits = self.test_edits_application(
            doc, coords_dictionary, edits_plan
        )
        
        # –®–∞–≥ 6: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.save_test_results(test_doc, successful_edits, failed_edits)
        
        # –®–∞–≥ 7: –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 60)
        print("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print("=" * 60)
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ –ø—Ä–∞–≤–æ–∫: {successful_edits}")
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å: {failed_edits}")
        print(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful_edits / len(edits_plan)) * 100:.1f}%")
        
        if failed_edits > 0:
            print("\nüîç –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ:")
            print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ run_id –≤ –æ—Ç–≤–µ—Ç–µ Gemini –∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ")
            print("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã run'–æ–≤")
            print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–∫—É –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ run'–æ–≤ –≤ –º–µ—Ç–æ–¥–µ _index_runs_and_build_map")
        else:
            print("\nüéâ –í–°–ï –ü–†–ê–í–ö–ò –ü–†–ò–ú–ï–ù–ï–ù–´ –£–°–ü–ï–®–ù–û!")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = TemplateProcessorTester()
    await tester.run_full_test()

if __name__ == "__main__":
    asyncio.run(main())
