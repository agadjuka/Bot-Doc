"""
Template Management Handler for Telegram Bot
Handles template upload, analysis, and management workflow
"""
import logging
import asyncio
from typing import Dict, Any, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from telegram.error import BadRequest

from config.settings import BotConfig
from services.template_processor_service import TemplateProcessorService
from services.storage_service import StorageService
from services.firestore_service import FirestoreService

logger = logging.getLogger(__name__)


class TemplateManagementHandler:
    """Handler for template management operations"""
    
    def __init__(self, config: BotConfig, firestore_service: Optional[FirestoreService] = None):
        """
        Initialize TemplateManagementHandler
        
        Args:
            config: Bot configuration
            firestore_service: Firestore service instance
        """
        self.config = config
        self.firestore_service = firestore_service
        self.template_processor = TemplateProcessorService()
        self.storage_service = StorageService(
            bucket_name=config.STORAGE_BUCKET_NAME,
            project_id=config.PROJECT_ID
        )
    
    async def templates_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """
        Handle /templates command - show template management menu
        
        Args:
            update: Telegram update
            context: Bot context
            
        Returns:
            Conversation state
        """
        try:
            keyboard = [
                [InlineKeyboardButton("‚ûï –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω", callback_data="upload_template")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "üìã **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏**\n\n"
                "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —à–∞–±–ª–æ–Ω–∞–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
            return ConversationHandler.END
            
        except Exception as e:
            logger.error(f"Error in templates_command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é —à–∞–±–ª–æ–Ω–æ–≤.")
            return ConversationHandler.END
    
    async def start_template_upload(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """
        Start template upload process
        
        Args:
            update: Telegram update
            context: Bot context
            
        Returns:
            Conversation state
        """
        try:
            query = update.callback_query
            await query.answer()
            
            await query.edit_message_text(
                "üìÑ **–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞**\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∞—à —à–∞–±–ª–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ .docx",
                parse_mode='Markdown'
            )
            
            return self.config.AWAITING_TEMPLATE_UPLOAD
            
        except Exception as e:
            logger.error(f"Error in start_template_upload: {e}")
            await update.callback_query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞.")
            return ConversationHandler.END
    
    async def handle_template_upload(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """
        Handle template file upload and analysis
        
        Args:
            update: Telegram update
            context: Bot context
            
        Returns:
            Conversation state
        """
        try:
            document = update.message.document
            user_id = update.effective_user.id
            
            print(f"üìÑ [TEMPLATE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–∞–π–ª: {document.file_name} ({document.file_size} –±–∞–π—Ç)")
            
            # Check file extension
            if not document.file_name.lower().endswith('.docx'):
                print(f"‚ùå [TEMPLATE] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {document.file_name}")
                await update.message.reply_text(
                    "‚ùå **–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞**\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .docx",
                    parse_mode='Markdown'
                )
                return self.config.AWAITING_TEMPLATE_UPLOAD
            
            # Send analysis message
            analysis_msg = await update.message.reply_text(
                "‚è≥ **–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à —à–∞–±–ª–æ–Ω...**\n\n"
                "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã.",
                parse_mode='Markdown'
            )
            
            print(f"üì• [TEMPLATE] –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª {document.file_name}...")
            # Download file
            file = await context.bot.get_file(document.file_id)
            file_bytes = await file.download_as_bytearray()
            file_bytes = bytes(file_bytes)
            print(f"‚úÖ [TEMPLATE] –§–∞–π–ª —Å–∫–∞—á–∞–Ω —É—Å–ø–µ—à–Ω–æ: {len(file_bytes)} –±–∞–π—Ç")
            
            print(f"ü§ñ [TEMPLATE] –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª –≤ Gemini –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...")
            # Analyze document
            replacements, field_names = await self.template_processor.analyze_document(file_bytes)
            print(f"‚úÖ [TEMPLATE] Gemini –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π: {len(field_names)}")
            
            if not field_names:
                print(f"‚ùå [TEMPLATE] –ê–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è - –ø–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                await analysis_msg.edit_text(
                    "‚ùå **–ê–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è**\n\n"
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ. "
                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –µ—Å—Ç—å –º–µ—Å—Ç–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö.",
                    parse_mode='Markdown'
                )
                return self.config.AWAITING_TEMPLATE_UPLOAD
            
            print(f"üîß [TEMPLATE] –°–æ–∑–¥–∞—é —É–º–Ω—ã–π —à–∞–±–ª–æ–Ω —Å {len(replacements)} –∑–∞–º–µ–Ω–∞–º–∏...")
            # Create smart template
            smart_template_bytes = self.template_processor.create_smart_template(file_bytes, replacements)
            print(f"‚úÖ [TEMPLATE] –£–º–Ω—ã–π —à–∞–±–ª–æ–Ω —Å–æ–∑–¥–∞–Ω: {len(smart_template_bytes)} –±–∞–π—Ç")
            
            # Store data in context for later use
            context.user_data['smart_template_bytes'] = smart_template_bytes
            context.user_data['field_names'] = field_names
            context.user_data['original_file_name'] = document.file_name
            
            # Create field list message
            field_list = "\n".join([f"‚Ä¢ {field}" for field in field_names])
            
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –î–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="confirm_template"),
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_template")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            print(f"üìã [TEMPLATE] –ü–æ–∫–∞–∑—ã–≤–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—è: {field_names}")
            await analysis_msg.edit_text(
                f"‚úÖ **–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n"
                f"–Ø –Ω–∞—à–µ–ª –≤ –≤–∞—à–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:\n\n"
                f"{field_list}\n\n"
                f"–í—Å—ë –≤–µ—Ä–Ω–æ?",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
            return self.config.AWAITING_TEMPLATE_CONFIRMATION
            
        except Exception as e:
            print(f"‚ùå [TEMPLATE] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —à–∞–±–ª–æ–Ω–∞: {e}")
            logger.error(f"Error in handle_template_upload: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —à–∞–±–ª–æ–Ω–∞.")
            return ConversationHandler.END
    
    async def handle_template_confirmation(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """
        Handle template confirmation
        
        Args:
            update: Telegram update
            context: Bot context
            
        Returns:
            Conversation state
        """
        try:
            query = update.callback_query
            await query.answer()
            
            if query.data == "cancel_template":
                await query.edit_message_text(
                    "‚ùå **–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞**\n\n"
                    "–®–∞–±–ª–æ–Ω –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω.",
                    parse_mode='Markdown'
                )
                return ConversationHandler.END
            
            elif query.data == "confirm_template":
                await query.edit_message_text(
                    "üìù **–û—Ç–ª–∏—á–Ω–æ!**\n\n"
                    "–¢–µ–ø–µ—Ä—å –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –¥–ª—è —ç—Ç–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ "
                    "(–Ω–∞–ø—Ä–∏–º–µ—Ä, '–î–æ–≥–æ–≤–æ—Ä –Ω–∞ —É—Å–ª—É–≥–∏').",
                    parse_mode='Markdown'
                )
                return self.config.AWAITING_TEMPLATE_NAME
            
        except Exception as e:
            logger.error(f"Error in handle_template_confirmation: {e}")
            await update.callback_query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞.")
            return ConversationHandler.END
    
    async def handle_template_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """
        Handle template name input and save template
        
        Args:
            update: Telegram update
            context: Bot context
            
        Returns:
            Conversation state
        """
        try:
            template_name = update.message.text.strip()
            user_id = update.effective_user.id
            
            print(f"üíæ [TEMPLATE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –∏–º—è —à–∞–±–ª–æ–Ω–∞: '{template_name}'")
            
            if not template_name:
                print(f"‚ùå [TEMPLATE] –ü—É—Å—Ç–æ–µ –∏–º—è —à–∞–±–ª–æ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await update.message.reply_text(
                    "‚ùå **–ò–º—è —à–∞–±–ª–æ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º**\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –¥–ª—è —à–∞–±–ª–æ–Ω–∞.",
                    parse_mode='Markdown'
                )
                return self.config.AWAITING_TEMPLATE_NAME
            
            # Get stored data
            smart_template_bytes = context.user_data.get('smart_template_bytes')
            field_names = context.user_data.get('field_names')
            
            if not smart_template_bytes or not field_names:
                print(f"‚ùå [TEMPLATE] –î–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–∞ –ø–æ—Ç–µ—Ä—è–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await update.message.reply_text(
                    "‚ùå **–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö**\n\n"
                    "–î–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–∞ –±—ã–ª–∏ –ø–æ—Ç–µ—Ä—è–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É –∑–∞–Ω–æ–≤–æ.",
                    parse_mode='Markdown'
                )
                return ConversationHandler.END
            
            # Create destination path
            destination_path = f"user_{user_id}/{template_name}.docx"
            print(f"üìÅ [TEMPLATE] –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {destination_path}")
            
            print(f"‚òÅÔ∏è [TEMPLATE] –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª –≤ Cloud Storage...")
            # Upload to storage
            upload_success = await self.storage_service.upload_file(
                smart_template_bytes,
                destination_path
            )
            
            if not upload_success:
                print(f"‚ùå [TEMPLATE] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Cloud Storage")
                await update.message.reply_text(
                    "‚ùå **–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è**\n\n"
                    "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω –≤ –æ–±–ª–∞—á–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.",
                    parse_mode='Markdown'
                )
                return ConversationHandler.END
            
            print(f"‚úÖ [TEMPLATE] –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Cloud Storage")
            
            # Save to Firestore
            if self.firestore_service:
                print(f"üî• [TEMPLATE] –°–æ—Ö—Ä–∞–Ω—è—é –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ Firestore...")
                firestore_success = await self.firestore_service.add_template(
                    user_id=user_id,
                    template_name=template_name,
                    file_path=destination_path,
                    file_type='docx'
                )
                
                if not firestore_success:
                    print(f"‚ö†Ô∏è [TEMPLATE] –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Firestore")
                    logger.warning(f"Failed to save template metadata to Firestore for user {user_id}")
                else:
                    print(f"‚úÖ [TEMPLATE] –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Firestore")
            else:
                print(f"‚ö†Ô∏è [TEMPLATE] Firestore —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # Clean up user data
            context.user_data.pop('smart_template_bytes', None)
            context.user_data.pop('field_names', None)
            context.user_data.pop('original_file_name', None)
            print(f"üßπ [TEMPLATE] –û—á–∏—â–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            print(f"üéâ [TEMPLATE] –®–∞–±–ª–æ–Ω '{template_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await update.message.reply_text(
                f"‚úÖ **–®–∞–±–ª–æ–Ω '{template_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!**\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —à–∞–±–ª–æ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.",
                parse_mode='Markdown'
            )
            
            return ConversationHandler.END
            
        except Exception as e:
            print(f"‚ùå [TEMPLATE] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞: {e}")
            logger.error(f"Error in handle_template_name: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞.")
            return ConversationHandler.END
    
    async def cancel_template_upload(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """
        Cancel template upload process
        
        Args:
            update: Telegram update
            context: Bot context
            
        Returns:
            Conversation state
        """
        try:
            # Clean up user data
            context.user_data.pop('smart_template_bytes', None)
            context.user_data.pop('field_names', None)
            context.user_data.pop('original_file_name', None)
            
            await update.message.reply_text(
                "‚ùå **–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞**\n\n"
                "–®–∞–±–ª–æ–Ω –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω.",
                parse_mode='Markdown'
            )
            
            return ConversationHandler.END
            
        except Exception as e:
            logger.error(f"Error in cancel_template_upload: {e}")
            return ConversationHandler.END
