# **Полный список команд для реализации трехъязычности (русский, английский, индонезийский)**

## **Этап 1: Создание структуры локализации**

**Команда 1:**

text

Создай структуру папок и файлов для локализации. Создай папку config/locales/ и файлы: __init__.py, ru.py, en.py, id.py, language_buttons.py, locale_manager.py

**Команда 2:**

text

Создай LocaleManager класс в config/locales/locale_manager.py. Класс должен уметь получать язык из context.user_data, возвращать тексты по ключам, поддерживать интерполяцию переменных, и иметь fallback на русский язык. Поддерживать языки: 'ru', 'en', 'id'.

**Команда 3:**

text

Создай файл config/locales/language_buttons.py с кнопками выбора языка. Кнопки должны быть одинаковыми для всех языков: "🇷🇺 Русский", "🇺🇸 English", "     Bahasa Indonesia". Эти кнопки не переводятся и используются во всех языковых версиях.

**Команда 4:**

text

Обнови файл config/locales/ru.py - УБЕРИ кнопки выбора языка из ru.py. Оставь только тексты сообщений на русском языке. Кнопки выбора языка теперь в отдельном файле language_buttons.py.

**Команда 5:**

text

Создай файл config/locales/en.py с английскими переводами всех текстов из ru.py. Сохрани ту же структуру и ключи. Переведи все тексты на английский язык. НЕ включай кнопки выбора языка (они в language_buttons.py).

**Команда 6:**

text

Создай файл config/locales/id.py с индонезийскими переводами всех текстов из ru.py. Сохрани ту же структуру и ключи. Переведи все тексты на индонезийский язык. НЕ включай кнопки выбора языка (они в language_buttons.py).

## **Этап 2: Интеграция в базовые классы**

**Команда 7:**

text

Обнови config/locales/__init__.py чтобы экспортировать LocaleManager, language_buttons и создать глобальный экземпляр. Добавь импорт всех трех языков (ru, en, id) и файла language_buttons.py.

**Команда 8:**

text

Обнови handlers/base_message_handler.py - добавь LocaleManager в конструктор и создай методы-хелперы: get_text(), get_button_text(), get_emoji().

**Команда 9:**

text

Обнови handlers/base_callback_handler.py - добавь LocaleManager аналогично base_message_handler.py.

## **Этап 3: Добавление выбора языка**

**Команда 10:**

text

Обнови handlers/message_handlers.py - добавь выбор языка в метод start(). При первом запуске показывай кнопки выбора языка из language_buttons.py, при повторном - основное меню на выбранном языке.

**Команда 11:**

text

Добавь обработчики выбора языка в handlers/callback_handlers.py. Создай callback для "select_language_ru", "select_language_en", "select_language_id" которые сохраняют выбор в context.user_data и показывают основное меню.

## **Этап 4: Локализация UI Manager**

**Команда 12:**

text

Обнови utils/ui_manager.py - замени все хардкод тексты на вызовы self.locale.get_text(). Добавь LocaleManager в конструктор.

## **Этап 5: Локализация основных handlers**

**Команда 13:**

text

Обнови handlers/message_handlers.py - локализуй все тексты в методе start() и других методах. Замени все хардкод строки на вызовы локализации.

**Команда 14:**

text

Обнови handlers/input_handler.py - локализуй все сообщения об ошибках, валидации и пользовательские сообщения.

**Команда 15:**

text

Обнови handlers/callback_handlers.py - локализуй все callback сообщения и ответы.

## **Этап 6: Локализация специализированных handlers**

**Команда 16:**

text

Обнови handlers/photo_handler.py - локализуй все сообщения об анализе фото, ошибках обработки, и результатах анализа.

**Команда 17:**

text

Обнови handlers/ingredient_matching_input_handler.py - локализуй все сообщения о сопоставлении ингредиентов, поиске и результатах.

**Команда 18:**

text

Обнови handlers/ingredient_matching_callback_handler.py - локализуй все callback сообщения для сопоставления ингредиентов.

**Команда 19:**

text

Обнови handlers/google_sheets_input_handler.py - локализуй все сообщения работы с Google Sheets.

**Команда 20:**

text

Обнови handlers/google_sheets_callback_handler.py - локализуй все callback сообщения для Google Sheets.

## **Этап 7: Локализация dispatchers**

**Команда 21:**

text

Обнови handlers/callback_dispatchers/receipt_edit_dispatcher.py - локализуй все сообщения редактирования чека.

**Команда 22:**

text

Обнови handlers/callback_dispatchers/ingredient_matching_dispatcher.py - локализуй все сообщения диспетчера сопоставления.

**Команда 23:**

text

Обнови handlers/callback_dispatchers/google_sheets_dispatcher.py - локализуй все сообщения диспетчера Google Sheets.

**Команда 24:**

text

Обнови handlers/callback_dispatchers/file_generation_dispatcher.py - локализуй все сообщения генерации файлов.

## **Этап 8: Локализация утилит**

**Команда 25:**

text

Обнови utils/common_handlers.py - локализуй все общие сообщения и хелперы.

**Команда 26:**

text

Обнови utils/formatters.py - локализуй все сообщения форматирования, если есть.

**Команда 27:**

text

Обнови validators/receipt_validator.py - локализуй все сообщения валидации.

## **Этап 9: Интеграция с Firestore**

**Команда 28:**

text

Создай сервис для работы с языковыми настройками в Firestore. Создай файл services/language_service.py с методами: save_user_language(), get_user_language(), set_default_language(). Поддерживать языки: 'ru', 'en', 'id'.

Добавь эти команды после команды 28:

**Команда 28а:**

text

Создай services/local_storage_service.py для локального хранения языковых настроек пользователей в JSON файле.

**Команда 28б:**

text

Обнови LocaleManager чтобы он работал в обеих средах: проверяй доступность Firestore, если недоступен - используй локальное хранилище.

**Команда 28в:**

text

Создай скрипты миграции данных между локальным хранилищем и Firestore для переключения между средами разработки и продакшена.

Теперь система будет работать и локально, и в облаке!

**Команда 29:**

text

Обнови LocaleManager чтобы он загружал язык пользователя из Firestore при инициализации и сохранял изменения в Firestore.

**Команда 30:**

text

Обнови main.py чтобы передавать language_service в handlers и инициализировать его.

## **Этап 10: Финальная настройка**

**Команда 31:**сааа

text

Обнови config/settings.py - добавь настройки для языков: SUPPORTED_LANGUAGES = ['ru', 'en', 'id'], DEFAULT_LANGUAGE = 'ru', LANGUAGE_COLLECTION_NAME = 'user_languages'. Добавь импорт language_buttons.py.

**Команда 32:**

text

Создай миграцию для существующих пользователей - добавь скрипт который установит русский язык по умолчанию для всех существующих пользователей в Firestore.

**Команда 33:**

text

Протестируй весь функционал - проверь переключение между всеми тремя языками, сохранение в Firestore, работу всех handlers на всех языках.

**Команда 34:**

text

Добавь логирование выбора языка и обнови README с инструкциями по многоязычности для трех языков.

---

## **🔧 Дополнительные команды для отладки:**

**Команда 35:**

text

Если есть ошибки - покажи мне все ошибки линтера и исправь их.

**Команда 36:**

text

Создай тестовый скрипт для проверки локализации - скрипт который проверит что все ключи локализации существуют во всех трех языках (ru, en, id) И что кнопки выбора языка одинаковые для всех языков.

**Команда 37:**

text

Создай файл с примерами переводов для индонезийского языка - добавь комментарии с контекстом для сложных переводов.

---

## **Точки тестирования:**

**Тест 1: После этапа 3 (команды 1-11)**

**Что тестируем:** Выбор языка и базовое меню

**Ожидаемый результат:**

- Кнопки выбора языка: "🇷🇺 Русский", "🇺🇸 English", "     Bahasa Indonesia"
- Меню отображается на выбранном языке
- Выбор сохраняется между сессиями

**Тест 2: После этапа 5 (команды 12-15)**

**Что тестируем:** Локализованные сообщения и ошибки

**Ожидаемый результат:**

- Все системные сообщения на выбранном языке
- Ошибки валидации локализованы на всех трех языках

**Тест 3: После этапа 6 (команды 16-20)**

**Что тестируем:** Полный цикл анализа чека

**Ожидаемый результат:**

- Весь интерфейс анализа чека на выбранном языке
- Кнопки редактирования локализованы на всех языках

**Тест 4: После этапа 9 (команды 28-30)**

**Что тестируем:** Сохранение в Firestore

**Ожидаемый результат:**

- Язык сохраняется в облаке для всех трех языков
- При перезапуске бота язык восстанавливается

---

## **📋 Чек-лист для каждого теста:**

- [ ]  Бот запускается без ошибок
- [ ]  Команда /start работает
- [ ]  Выбор языка работает (для тестов 1-4)
- [ ]  Интерфейс отображается на выбранном языке
- [ ]  Основные функции работают
- [ ]  [ ] Нет критических ошибок в логах
- [ ]  Кнопки выбора языка одинаковые для всех языков

**Рекомендую тестировать после этапов 3, 5 и 9** - это даст хорошее представление о прогрессе и позволит быстро найти проблемы.

Review Changes

51%

Add Context

##