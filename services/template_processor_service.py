"""
Template Processor Service for automatic field detection and marking in documents.
This service analyzes documents and identifies fields that need to be filled with company data.
"""

import json
import logging
import os
import re
from typing import Dict, List, Tuple
from io import BytesIO

import google.generativeai as genai
from google.oauth2 import service_account
from docx import Document
from docx.shared import RGBColor
import docx2txt

logger = logging.getLogger(__name__)


class TemplateProcessorService:
    """
    Service for processing document templates using simplified analysis strategy.
    Analyzes documents and creates two files: preview for user and smart template for storage.
    """
    
    def __init__(self):
        """
        Initialize the TemplateProcessorService using Google Cloud authentication.
        """
        self._initialize_gemini()
        logger.info("TemplateProcessorService initialized successfully")
    
    def _initialize_gemini(self):
        """Initialize Google Gemini AI service using Google Cloud authentication"""
        try:
            # Get credentials file path
            credentials_path = os.getenv("GOOGLE_APPLICATION_CREDENTIALS")
            if not credentials_path:
                logger.error("GOOGLE_APPLICATION_CREDENTIALS not set")
                raise ValueError("GOOGLE_APPLICATION_CREDENTIALS is required")
            
            if not os.path.exists(credentials_path):
                logger.error(f"Credentials file not found: {credentials_path}")
                raise FileNotFoundError(f"Credentials file not found: {credentials_path}")
            
            # Load service account credentials
            credentials = service_account.Credentials.from_service_account_file(
                credentials_path,
                scopes=['https://www.googleapis.com/auth/generative-language']
            )
            
            # Configure Gemini API with service account credentials
            genai.configure(credentials=credentials)
            
            # Initialize model (using flash model for better performance)
            self.model = genai.GenerativeModel('gemini-2.5-flash')
            logger.info("Gemini AI service initialized successfully")
            
        except Exception as e:
            logger.error(f"Failed to initialize Gemini AI service: {e}")
            raise
    
    async def analyze_and_prepare_templates(self, file_bytes: bytes, file_format: str = '.docx') -> Tuple[bytes, bytes]:
        """
        Analyze document and prepare two files: preview for user and smart template for storage.
        
        Args:
            file_bytes: Document content as bytes
            file_format: File format ('.docx' or '.doc')
            
        Returns:
            Tuple of (preview_bytes, smart_template_bytes)
        """
        try:
            print(f"üìÑ [ANALYZE] –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Ä–∞–∑–º–µ—Ä–æ–º {len(file_bytes)} –±–∞–π—Ç")
            
            # Step 1: Extract text from document
            if file_format == '.docx':
                print(f"üìñ [ANALYZE] –ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç –∏–∑ DOCX —Ñ–∞–π–ª–∞...")
                document_text = self._extract_text_from_docx(file_bytes)
            elif file_format == '.doc':
                print(f"üìñ [ANALYZE] –ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç –∏–∑ DOC —Ñ–∞–π–ª–∞...")
                document_text = self._extract_text_from_doc(file_bytes)
            else:
                print(f"‚ùå [ANALYZE] –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file_format}")
                return b'', b''
            
            if not document_text.strip():
                print(f"‚ö†Ô∏è [ANALYZE] –î–æ–∫—É–º–µ–Ω—Ç –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å")
                logger.warning("Document appears to be empty or could not be read")
                return b'', b''
            
            print(f"‚úÖ [ANALYZE] –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(document_text)} —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞")
            
            # Step 2: Create simple prompt for Gemini
            prompt = self._create_simple_prompt(document_text)
            
            print(f"ü§ñ [ANALYZE] –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ Gemini...")
            logger.info("Sending document analysis request to Gemini...")
            response = await self._send_gemini_request(prompt)
            
            if not response:
                print(f"‚ùå [ANALYZE] –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini")
                return b'', b''
            
            print(f"‚úÖ [ANALYZE] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Gemini: {len(response)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # Step 3: Parse JSON response
            replacements = self._parse_gemini_response(response)
            
            if not replacements:
                print(f"‚ùå [ANALYZE] –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç Gemini")
                return b'', b''
            
            print(f"‚úÖ [ANALYZE] –ù–∞–π–¥–µ–Ω–æ {len(replacements)} –ø–æ–ª–µ–π –¥–ª—è –∑–∞–º–µ–Ω—ã")
            
            # Step 4: Create preview file with red markers
            print(f"üîß [ANALYZE] –°–æ–∑–¥–∞—é —Ñ–∞–π–ª –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞...")
            preview_bytes = self._create_preview_file(file_bytes, replacements)
            
            if not preview_bytes:
                print(f"‚ùå [ANALYZE] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
                return b'', b''
            
            # Step 5: Create smart template with placeholders
            print(f"üîß [ANALYZE] –°–æ–∑–¥–∞—é —É–º–Ω—ã–π —à–∞–±–ª–æ–Ω...")
            smart_template_bytes = self._create_smart_template(file_bytes, replacements)
            
            if not smart_template_bytes:
                print(f"‚ùå [ANALYZE] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É–º–Ω—ã–π —à–∞–±–ª–æ–Ω")
                return b'', b''
            
            print(f"‚úÖ [ANALYZE] –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–æ–∑–¥–∞–Ω—ã —Ñ–∞–π–ª—ã:")
            print(f"   - –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä: {len(preview_bytes)} –±–∞–π—Ç")
            print(f"   - –£–º–Ω—ã–π —à–∞–±–ª–æ–Ω: {len(smart_template_bytes)} –±–∞–π—Ç")
            logger.info(f"Document analysis completed. Preview: {len(preview_bytes)} bytes, Smart template: {len(smart_template_bytes)} bytes")
            
            return preview_bytes, smart_template_bytes
            
        except Exception as e:
            print(f"‚ùå [ANALYZE] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            logger.error(f"Error in document analysis: {e}")
            return b'', b''
    
    def _extract_text_from_docx(self, file_bytes: bytes) -> str:
        """
        Extract text content from a DOCX file.
        
        Args:
            file_bytes: Document content as bytes
            
        Returns:
            Extracted text content
        """
        try:
            # Create BytesIO object from bytes
            doc_stream = BytesIO(file_bytes)
            
            # Load document
            doc = Document(doc_stream)
            
            # Extract text from all paragraphs
            text_parts = []
            for paragraph in doc.paragraphs:
                if paragraph.text.strip():
                    text_parts.append(paragraph.text.strip())
            
            # Also extract text from tables
            for table in doc.tables:
                for row in table.rows:
                    for cell in row.cells:
                        if cell.text.strip():
                            text_parts.append(cell.text.strip())
            
            full_text = '\n'.join(text_parts)
            logger.info(f"Extracted {len(full_text)} characters from document")
            return full_text
            
        except Exception as e:
            logger.error(f"Error extracting text from DOCX: {e}")
            return ""
    
    def _extract_text_from_doc(self, file_bytes: bytes) -> str:
        """
        Extract text content from a DOC file.
        
        Args:
            file_bytes: Document content as bytes
            
        Returns:
            Extracted text content
        """
        try:
            # Create BytesIO object from bytes
            doc_stream = BytesIO(file_bytes)
            
            # Use docx2txt to extract text from DOC file
            text = docx2txt.process(doc_stream)
            
            if text:
                logger.info(f"Extracted {len(text)} characters from DOC document")
                return text
            else:
                logger.warning("No text extracted from DOC document")
                return ""
            
        except Exception as e:
            logger.error(f"Error extracting text from DOC: {e}")
            return ""
    
    def _create_simple_prompt(self, document_text: str) -> str:
        """
        Create comprehensive prompt for Gemini to analyze the document.
        
        Args:
            document_text: Text content of the document
            
        Returns:
            Formatted prompt for Gemini
        """
        prompt = f"""–®–ê–ì 1: –û–ø—Ä–µ–¥–µ–ª–∏, –∫–∞–∫—É—é —Å—Ç–æ—Ä–æ–Ω—É –¥–æ–≥–æ–≤–æ—Ä–∞ –º—ã –∑–∞–ø–æ–ª–Ω—è–µ–º. –û–ø—Ä–µ–¥–µ–ª–∏ —ç—Ç–æ –ø–æ —Ç–æ–º—É, —É –∫–∞–∫–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –ø—Ä–æ–ø—É—â–µ–Ω—ã –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≤—Å–µ –ø–æ–ª—è (–≤—ã–¥–µ–ª–µ–Ω—ã –∂–µ–ª—Ç—ã–º –º–∞—Ä–∫–µ—Ä–æ–º –∏–ª–∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º). –¢–û–õ–¨–ö–û —ç—Ç—É —Å—Ç–æ—Ä–æ–Ω—É –º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º.

–®–ê–ì 2: –í —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏ –∏–º—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –î–†–£–ì–û–ô —Å—Ç–æ—Ä–æ–Ω—ã –ó–ê–ü–†–ï–©–ï–ù–û –≤–Ω–æ—Å–∏—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è, —ç—Ç—É —Å—Ç–æ—Ä–æ–Ω—É –Ω—É–∂–Ω–æ –ò–ì–ù–û–†–ò–†–û–í–ê–¢–¨.

–®–ê–ì 3: –û–±—Ä–∞—â–∞–π –≤–Ω–∏–º–∞–Ω–∏–µ –¢–û–õ–¨–ö–û –Ω–∞ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–¥–µ–ª–µ–Ω—ã –∂–µ–ª—Ç—ã–º –º–∞—Ä–∫–µ—Ä–æ–º –∏–ª–∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º. –≠—Ç–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø—Ä–æ–ø—É—Å–∫–æ–º –∏–ª–∏ –ø—É—Å—Ç—ã–º –º–µ—Å—Ç–æ–º. –ò–º–µ–Ω–Ω–æ —Å —ç—Ç–∏–º–∏ –º–µ—Å—Ç–∞–º–∏ —Ç—ã –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å. –ù–∏—á–µ–≥–æ –¥—Ä—É–≥–æ–≥–æ –Ω–µ —Ç—Ä–æ–≥–∞–π.

–®–ê–ì 4: –í–ê–ñ–ù–û! –†–∞–∑–ª–∏—á–∞–π –¥–≤–∞ —Ç–∏–ø–∞ –ø–æ–ª–µ–π:
- –í –®–ê–ü–ö–ï –¥–æ–≥–æ–≤–æ—Ä–∞ (–≥–¥–µ –ø–µ—Ä–µ—á–∏—Å–ª—è—é—Ç—Å—è —Å—Ç–æ—Ä–æ–Ω—ã) - –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å —Ç–æ–ª—å–∫–æ –ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞, –ù–ï —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
- –í –¢–ê–ë–õ–ò–¶–ï —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ - –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å –ø–æ–ª–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã

{document_text}

–ù–∞–π–¥–∏ –≤ –∑–∞–ø–æ–ª–Ω—è–µ–º–æ–π —Å—Ç–æ—Ä–æ–Ω–µ:
1. –í —à–∞–ø–∫–µ –¥–æ–≥–æ–≤–æ—Ä–∞: –º–µ—Å—Ç–æ –¥–ª—è –ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–Ø –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ (–ù–ï —Ä–µ–∫–≤–∏–∑–∏—Ç—ã!) - —Ç–æ–ª—å–∫–æ –ø–æ–ª—è —Å –∂–µ–ª—Ç—ã–º –º–∞—Ä–∫–µ—Ä–æ–º –∏–ª–∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º
2. –í —Ç–∞–±–ª–∏—Ü–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤: –í–°–Æ –ø—É—Å—Ç—É—é —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ - —Ç–æ–ª—å–∫–æ –ø–æ–ª—è —Å –∂–µ–ª—Ç—ã–º –º–∞—Ä–∫–µ—Ä–æ–º –∏–ª–∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º  
3. –ú–µ—Å—Ç–æ –¥–ª—è –∏–º–µ–Ω–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –≤–Ω–∏–∑—É –¥–æ–∫—É–º–µ–Ω—Ç–∞ - —Ç–æ–ª—å–∫–æ –ø–æ–ª—è —Å –∂–µ–ª—Ç—ã–º –º–∞—Ä–∫–µ—Ä–æ–º –∏–ª–∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º

–í–µ—Ä–Ω–∏ JSON:
[{{"original_text": "–º–µ—Å—Ç–æ –¥–ª—è –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –≤ —à–∞–ø–∫–µ", "type": "PARTY_2_NAME"}}, {{"original_text": "–≤—Å—è —Ç–∞–±–ª–∏—Ü–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –∑–∞–ø–æ–ª–Ω—è–µ–º–æ–π —Å—Ç–æ—Ä–æ–Ω—ã", "type": "PARTY_2_REQUISITES"}}, {{"original_text": "–º–µ—Å—Ç–æ –¥–ª—è –∏–º–µ–Ω–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –∑–∞–ø–æ–ª–Ω—è–µ–º–æ–π —Å—Ç–æ—Ä–æ–Ω—ã", "type": "PARTY_2_DIRECTOR_NAME"}}]

–¢–û–õ–¨–ö–û JSON –±–µ–∑ —Ç–µ–∫—Å—Ç–∞."""
        
        return prompt
    
    async def _send_gemini_request(self, prompt: str) -> str:
        """
        Send request to Gemini API.
        
        Args:
            prompt: Prompt to send to Gemini
            
        Returns:
            Response from Gemini
        """
        try:
            print(f"üöÄ [GEMINI] –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ Gemini API...")
            # Generate content using Gemini
            response = self.model.generate_content(prompt)
            
            if response.text:
                print(f"‚úÖ [GEMINI] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Gemini: {len(response.text)} —Å–∏–º–≤–æ–ª–æ–≤")
                logger.info("Received response from Gemini")
                return response.text
            else:
                print(f"‚ùå [GEMINI] –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini")
                logger.error("Empty response from Gemini")
                return ""
                
        except Exception as e:
            print(f"‚ùå [GEMINI] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ Gemini: {e}")
            logger.error(f"Error sending request to Gemini: {e}")
            return ""
    
    def _create_preview_file(self, file_bytes: bytes, replacements: List[Dict[str, str]]) -> bytes:
        """
        Create preview file with red markers for user fields.
        
        Args:
            file_bytes: Original document bytes
            replacements: List of field replacements from Gemini
            
        Returns:
            Modified document bytes with red markers
        """
        try:
            print(f"üîß [PREVIEW] –°–æ–∑–¥–∞—é —Ñ–∞–π–ª –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞...")
            
            # Create BytesIO object from input bytes
            doc_stream = BytesIO(file_bytes)
            
            # Load document using python-docx
            doc = Document(doc_stream)
            
            # Create replacement mapping for preview
            preview_replacements = {}
            for replacement in replacements:
                original_text = replacement['original_text']
                field_type = replacement['type']
                
                if field_type == 'PARTY_2_NAME':
                    preview_replacements[original_text] = '[–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞]'
                elif field_type == 'PARTY_2_REQUISITES':
                    # –î–ª—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
                    lines = original_text.split('\n')
                    if lines:
                        preview_replacements[lines[0]] = '[–†–µ–∫–≤–∏–∑–∏—Ç—ã –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞]'
                elif field_type == 'PARTY_2_DIRECTOR_NAME':
                    preview_replacements[original_text] = '[–ò–º—è –î–∏—Ä–µ–∫—Ç–æ—Ä–∞]'
            
            print(f"‚úÖ [PREVIEW] –°–æ–∑–¥–∞–Ω–æ {len(preview_replacements)} –∑–∞–º–µ–Ω –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
            
            # Apply replacements to document
            self._apply_replacements_to_document(doc, preview_replacements, is_preview=True)
            
            # Save modified document to memory
            output_stream = BytesIO()
            doc.save(output_stream)
            output_bytes = output_stream.getvalue()
            
            print(f"‚úÖ [PREVIEW] –§–∞–π–ª –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–∑–¥–∞–Ω: {len(output_bytes)} –±–∞–π—Ç")
            logger.info(f"Preview file created successfully. Output size: {len(output_bytes)} bytes")
            return output_bytes
            
        except Exception as e:
            print(f"‚ùå [PREVIEW] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}")
            logger.error(f"Error creating preview file: {e}")
            return b''
    
    def _create_smart_template(self, file_bytes: bytes, replacements: List[Dict[str, str]]) -> bytes:
        """
        Create smart template with standardized placeholders.
        
        Args:
            file_bytes: Original document bytes
            replacements: List of field replacements from Gemini
            
        Returns:
            Modified document bytes with smart placeholders
        """
        try:
            print(f"üîß [SMART] –°–æ–∑–¥–∞—é —É–º–Ω—ã–π —à–∞–±–ª–æ–Ω...")
            
            # Create BytesIO object from input bytes
            doc_stream = BytesIO(file_bytes)
            
            # Load document using python-docx
            doc = Document(doc_stream)
            
            # Create replacement mapping for smart template
            smart_replacements = {}
            for replacement in replacements:
                original_text = replacement['original_text']
                field_type = replacement['type']
                
                if field_type == 'PARTY_2_NAME':
                    smart_replacements[original_text] = '{{PARTY_2_NAME}}'
                elif field_type == 'PARTY_2_REQUISITES':
                    # –î–ª—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –≤ —É–º–Ω–æ–º —à–∞–±–ª–æ–Ω–µ –∑–∞–º–µ–Ω—è–µ–º –≤—Å—é —Ç–∞–±–ª–∏—Ü—É
                    smart_replacements[original_text] = '{{PARTY_2_REQUISITES}}'
                elif field_type == 'PARTY_2_DIRECTOR_NAME':
                    smart_replacements[original_text] = '{{PARTY_2_DIRECTOR_NAME}}'
            
            print(f"‚úÖ [SMART] –°–æ–∑–¥–∞–Ω–æ {len(smart_replacements)} –∑–∞–º–µ–Ω –¥–ª—è —É–º–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞")
            
            # Apply replacements to document
            self._apply_replacements_to_document(doc, smart_replacements, is_preview=False)
            
            # Save modified document to memory
            output_stream = BytesIO()
            doc.save(output_stream)
            output_bytes = output_stream.getvalue()
            
            print(f"‚úÖ [SMART] –£–º–Ω—ã–π —à–∞–±–ª–æ–Ω —Å–æ–∑–¥–∞–Ω: {len(output_bytes)} –±–∞–π—Ç")
            logger.info(f"Smart template created successfully. Output size: {len(output_bytes)} bytes")
            return output_bytes
            
        except Exception as e:
            print(f"‚ùå [SMART] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–º–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞: {e}")
            logger.error(f"Error creating smart template: {e}")
            return b''
    
    def _apply_replacements_to_document(self, doc: Document, replacements: Dict[str, str], is_preview: bool = True):
        """
        Apply replacements to document while preserving formatting.
        
        Args:
            doc: python-docx Document object
            replacements: Dictionary mapping original text to replacement text
            is_preview: Whether this is for preview (red formatting) or smart template
        """
        try:
            print(f"üîß [APPLY] –ü—Ä–∏–º–µ–Ω—è—é {len(replacements)} –∑–∞–º–µ–Ω –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É...")
            
            # Process all paragraphs
            for paragraph in doc.paragraphs:
                if paragraph.text.strip():
                    self._apply_replacements_to_paragraph(paragraph, replacements, is_preview)
            
            # Process all tables
            for table in doc.tables:
                for row in table.rows:
                    for cell in row.cells:
                        for paragraph in cell.paragraphs:
                            if paragraph.text.strip():
                                self._apply_replacements_to_paragraph(paragraph, replacements, is_preview)
            
            print(f"‚úÖ [APPLY] –ó–∞–º–µ–Ω—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É")
            
        except Exception as e:
            print(f"‚ùå [APPLY] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∑–∞–º–µ–Ω: {e}")
            logger.error(f"Error applying replacements to document: {e}")
    
    def _apply_replacements_to_paragraph(self, paragraph, replacements: Dict[str, str], is_preview: bool = True):
        """
        Apply replacements to paragraph while preserving formatting.
        
        Args:
            paragraph: python-docx paragraph object
            replacements: Dictionary mapping original text to replacement text
            is_preview: Whether this is for preview (red formatting) or smart template
        """
        try:
            original_text = paragraph.text
            
            # Check if this paragraph contains any replacement
            for original_part, replacement_text in replacements.items():
                if original_part.strip() and original_part in original_text:
                    # Clear the paragraph
                    paragraph.clear()
                    
                    # Split text around the original part
                    parts = original_text.split(original_part)
                    
                    # Add text before the field
                    if parts[0]:
                        paragraph.add_run(parts[0])
                    
                    # Add replacement text with formatting
                    replacement_run = paragraph.add_run(replacement_text)
                    if is_preview:
                        # Red formatting for preview
                        replacement_run.font.color.rgb = RGBColor(255, 0, 0)  # Red color
                        replacement_run.font.bold = True
                    
                    # Add text after the field
                    if len(parts) > 1 and parts[1]:
                        paragraph.add_run(parts[1])
                    
                    print(f"‚úÖ [REPLACE] –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ –∑–∞–º–µ–Ω–∞: '{original_part[:30]}...' -> '{replacement_text}'")
                    break
            
        except Exception as e:
            print(f"‚ùå [REPLACE] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∑–∞–º–µ–Ω—ã: {e}")
            logger.error(f"Error applying replacement to paragraph: {e}")
    
    def _parse_gemini_response(self, response: str) -> List[Dict[str, str]]:
        """
        Parse JSON response from Gemini.

        Args:
            response: Raw response from Gemini

        Returns:
            List of field data dictionaries
        """
        try:
            print(f"üîç [PARSE] –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini...")
            print(f"üîç [PARSE] –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(response)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # Clean the response (remove markdown formatting if present)
            cleaned_response = response.strip()
            
            # Remove markdown code blocks
            if cleaned_response.startswith('```json'):
                cleaned_response = cleaned_response[7:]
            elif cleaned_response.startswith('```'):
                cleaned_response = cleaned_response[3:]
            
            if cleaned_response.endswith('```'):
                cleaned_response = cleaned_response[:-3]
            
            cleaned_response = cleaned_response.strip()
            
            print(f"üîç [PARSE] –û—á–∏—â–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {cleaned_response[:100]}...")
            
            # Try to find JSON array in the response
            json_start = cleaned_response.find('[')
            json_end = cleaned_response.rfind(']') + 1
            
            print(f"üîç [PARSE] –ù–∞–π–¥–µ–Ω JSON –º–∞—Å—Å–∏–≤: –ø–æ–∑–∏—Ü–∏—è {json_start} - {json_end}")
            
            if json_start != -1 and json_end > json_start:
                json_text = cleaned_response[json_start:json_end]
                field_data = json.loads(json_text)
            else:
                # If no array found, try to parse the whole response
                field_data = json.loads(cleaned_response)

            if not isinstance(field_data, list):
                logger.error("Gemini response is not a list")
                return []

            # Validate that each item has required fields
            valid_fields = []
            for item in field_data:
                if isinstance(item, dict) and 'original_text' in item and 'type' in item:
                    if item['type'] in ['PARTY_2_NAME', 'PARTY_2_REQUISITES', 'PARTY_2_DIRECTOR_NAME']:
                        valid_fields.append(item)
                        print(f"‚úÖ [PARSE] –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ: {item['type']} -> '{item['original_text'][:50]}...'")
                    else:
                        print(f"‚ö†Ô∏è [PARSE] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–ª—è: {item['type']}")
                else:
                    print(f"‚ö†Ô∏è [PARSE] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–ª—è: {item}")
            
            logger.info(f"Successfully parsed {len(valid_fields)} valid fields from Gemini response")
            return valid_fields

        except json.JSONDecodeError as e:
            logger.error(f"Error parsing JSON response from Gemini: {e}")
            logger.error(f"Raw response: {response}")
            print(f"‚ùå [PARSE] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            print(f"‚ùå [PARSE] –ò—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç: {response[:200]}...")
            return []
        except Exception as e:
            logger.error(f"Unexpected error parsing Gemini response: {e}")
            return []