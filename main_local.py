"""
Main entry point for the AI Bot application - LOCAL DEVELOPMENT VERSION
Uses polling instead of webhook for local development
"""
import logging
import asyncio
import os
import warnings
from dotenv import load_dotenv

# –ü–æ–¥–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è PTBUserWarning –¥–ª—è –±–æ–ª–µ–µ —á–∏—Å—Ç–æ–≥–æ –≤—ã–≤–æ–¥–∞
warnings.filterwarnings("ignore", category=UserWarning, module="telegram")
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
)
from telegram.error import Conflict, NetworkError
from config.locales.locale_manager import initialize_locale_manager

# –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ü–ï–†–í–´–ú –î–ï–õ–û–ú
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É env.local
env_path = os.path.join(os.path.dirname(__file__), "env.local")
print(f"üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑: {env_path}")
load_dotenv(env_path)

# –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø
def setup_environment():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º BOT_TOKEN
    bot_token = os.environ.get("BOT_TOKEN")
    
    # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Ñ–∞–π–ª–∞
    if not bot_token:
        print("‚ö†Ô∏è BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞...")
        try:
            env_file_path = os.path.join(os.path.dirname(__file__), "env.local")
            if os.path.exists(env_file_path):
                with open(env_file_path, 'r', encoding='utf-8') as f:
                    for line in f:
                        if line.strip().startswith('BOT_TOKEN='):
                            bot_token = line.strip().split('=', 1)[1]
                            os.environ["BOT_TOKEN"] = bot_token
                            print(f"‚úÖ BOT_TOKEN –∑–∞–≥—Ä—É–∂–µ–Ω")
                            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ env.local: {e}")
    
    if not bot_token:
        print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª env.local")
        print(f"üí° –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {os.path.join(os.path.dirname(__file__), 'env.local')}")
        return False
    else:
        print(f"‚úÖ BOT_TOKEN –Ω–∞–π–¥–µ–Ω")
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    credentials_path = os.path.join(os.path.dirname(__file__), "bot-doc-473208-706e6adceee1.json")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    if os.path.exists(credentials_path):
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
        if not os.environ.get("GOOGLE_APPLICATION_CREDENTIALS"):
            os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = credentials_path
            print(f"‚úÖ GOOGLE_APPLICATION_CREDENTIALS —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {credentials_path}")
        else:
            print(f"‚úÖ GOOGLE_APPLICATION_CREDENTIALS —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {os.environ.get('GOOGLE_APPLICATION_CREDENTIALS')}")
    else:
        print(f"‚ùå –§–∞–π–ª —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {credentials_path}")
        return False
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Firestore
    if not os.environ.get("FIRESTORE_DATABASE"):
        os.environ["FIRESTORE_DATABASE"] = "docbot"
        print("‚úÖ FIRESTORE_DATABASE —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: docbot")
    else:
        print(f"‚úÖ FIRESTORE_DATABASE —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {os.environ.get('FIRESTORE_DATABASE')}")
    
    return True

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
if not setup_environment():
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Firestore
# –≠—Ç–æ—Ç –∫–æ–¥ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ Cloud Run
# –∏ –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è.
from google.cloud import firestore

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Firestore —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    database_name = os.getenv("FIRESTORE_DATABASE", "docbot")
    db = firestore.Client(database=database_name)
    print(f"‚úÖ Firestore –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ (–±–∞–∑–∞: {database_name})")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firestore: {e}")
    print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è GOOGLE_APPLICATION_CREDENTIALS —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    print(f"üí° –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {os.environ.get('GOOGLE_APPLICATION_CREDENTIALS', '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–û')}")
    db = None

# OpenCV removed for template - not needed for basic bot functionality
opencv_available = False

from config.settings import BotConfig
from config.prompts import PromptManager
from services.ai_service import AIService, ReceiptAnalysisServiceCompat, AIServiceFactory
from handlers.message_handlers import MessageHandlers
from handlers.callback_handlers import CallbackHandlers
from handlers.document_handler import DocumentHandler
from handlers.dashboard_handler import create_dashboard_conversation_handler
from handlers.template_management_handler import TemplateManagementHandler
from services.firestore_service import get_firestore_service
# MessageSender removed for template
# Google Sheets handler removed for template


def safe_start_bot(application: Application, max_retries: int = 3) -> None:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤"""
    for attempt in range(max_retries):
        try:
            print(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ #{attempt + 1}...")
            
            # –°–±—Ä–æ—Å webhook –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∑–∞–ø—É—Å–∫–æ–º
            try:
                import asyncio
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                loop.run_until_complete(application.bot.delete_webhook(drop_pending_updates=True))
                print("‚úÖ Webhook —Å–±—Ä–æ—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ webhook: {e}")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
            import time
            time.sleep(2)
            
            # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
            application.run_polling()
            break
            
        except Conflict as e:
            print(f"‚ùå –ö–æ–Ω—Ñ–ª–∏–∫—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}")
            if attempt < max_retries - 1:
                wait_time = (attempt + 1) * 5  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                time.sleep(wait_time)
            else:
                print("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ –¥—Ä—É–≥–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞.")
                raise
                
        except NetworkError as e:
            print(f"üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}")
            if attempt < max_retries - 1:
                wait_time = 3
                print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                time.sleep(wait_time)
            else:
                raise
                
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            raise


# Cleanup function removed for template - not needed for basic bot functionality

def main() -> None:
    """Main function to start the bot"""
    # –¢–æ–∫–µ–Ω —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω –≤ setup_environment()
    
    # Initialize configuration
    config = BotConfig()
    prompt_manager = PromptManager()
    
    # Initialize AI Service Factory for dual model support
    ai_factory = AIServiceFactory(config, prompt_manager)
    
    # Get default AI service (Pro model)
    ai_service = ai_factory.get_default_service()
    analysis_service = ReceiptAnalysisServiceCompat(ai_service, ai_factory)
    
    print(f"ü§ñ AI Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {ai_service.get_current_model_info()['name']}")
    print(f"üè≠ AIServiceFactory –≥–æ—Ç–æ–≤–∞: {list(ai_factory._services.keys())}")
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LocaleManager –ü–ï–†–ï–î —Å–æ–∑–¥–∞–Ω–∏–µ–º handlers
    initialize_locale_manager(db)
    
    # Initialize handlers
    message_handlers = MessageHandlers(config, analysis_service)
    callback_handlers = CallbackHandlers(config, analysis_service)
    document_handlers = DocumentHandler(config, analysis_service)
    
    # Initialize Firestore service
    firestore_service = get_firestore_service(db)
    
    # Initialize template management handler
    template_handler = TemplateManagementHandler(config, firestore_service)
    
    # Create dashboard conversation handler
    dashboard_conv_handler = create_dashboard_conversation_handler(config)
    
    # Create template management conversation handler
    template_conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("templates", template_handler.templates_command),
            CallbackQueryHandler(template_handler.start_template_upload, pattern="^upload_template$")
        ],
        states={
            config.AWAITING_TEMPLATE_UPLOAD: [
                MessageHandler(filters.Document.ALL, template_handler.handle_template_upload),
                CommandHandler("cancel", template_handler.cancel_template_upload)
            ],
            config.AWAITING_TEMPLATE_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, template_handler.handle_template_name_and_save),
                CommandHandler("cancel", template_handler.cancel_template_upload)
            ]
        },
        fallbacks=[
            CommandHandler("cancel", template_handler.cancel_template_upload)
        ],
        per_message=False
    )
    
    # Initialize message sender for centralized message sending
    # Example usage:
    # message_sender = MessageSender(config)
    # await message_sender.send_success_message(update, context, "–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    # await message_sender.send_error_message(update, context, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
    # await message_sender.send_temp_message(update, context, "–í—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", duration=5)
    
    # Ingredient storage removed for template - not needed for basic bot functionality
    
    # Create application
    application = Application.builder().token(config.BOT_TOKEN).concurrent_updates(True).build()
    
    # Services removed for template - only basic bot functionality remains
    print("‚úÖ Template mode: Advanced services disabled")

    # Create conversation handler with document creation workflow
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", message_handlers.start),
            CommandHandler("help", message_handlers.help_command),
            CommandHandler("dashboard", message_handlers.dashboard_command),
            CommandHandler("new_contract", document_handlers.new_contract_command),
            CommandHandler("templates", template_handler.templates_command),
            MessageHandler(filters.TEXT & ~filters.COMMAND, message_handlers.handle_text),
            MessageHandler(filters.Document.ALL, message_handlers.handle_document),
            CallbackQueryHandler(callback_handlers.handle_callback_query)
        ],
        states={
            config.AWAITING_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, message_handlers.handle_text),
                MessageHandler(filters.Document.ALL, message_handlers.handle_document),
                CommandHandler("help", message_handlers.help_command),
                CommandHandler("dashboard", message_handlers.dashboard_command),
                CommandHandler("new_contract", document_handlers.new_contract_command),
                CallbackQueryHandler(callback_handlers.handle_callback_query)
            ],
            config.AWAITING_COMPANY_INFO: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, document_handlers.handle_company_info),
                CommandHandler("cancel", document_handlers.cancel_document_creation)
            ],
        },
        fallbacks=[
            CommandHandler("cancel", message_handlers.start),
            CommandHandler("help", message_handlers.help_command)
        ],
        per_message=False
    )

    # Add handlers - IMPORTANT: Order matters! More specific handlers should be added first
    application.add_handler(template_conv_handler)  # Template handler first (handles upload_template)
    application.add_handler(dashboard_conv_handler)  # Dashboard handler second
    application.add_handler(conv_handler)  # General handler last (catches everything else)
    
    # Role initialization removed for template

    # 4. –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    
    try:
        safe_start_bot(application)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
        print("   1. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ –¥—Ä—É–≥–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞")
        print("   2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
        print("   3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç")


if __name__ == "__main__":
    main()
